if (folder_moved) {

  folder_to_zip   <- FolderName  
  zip_file        <- paste0("c:\\temp\\", folder_to_zip, ".zip")
  max_size_bytes  <- 25 * 1024 * 1024

  suppressWarnings(
    zip::zip(zip_file,
             files = folder_to_zip,
             root  = '\\\\oh2shared\\oh2actuarial\\National\\Disruption Insourcing\\_Production Finished Batch/')
  )

  zip_file_size <- fs::file_info(zip_file)$size
  num_flags     <- sum(Disruption_Data$Flag == "FLAG", na.rm = TRUE)

  # Default email body
  bl_body <- if (zip_file_size <= max_size_bytes) {
    paste0("The ", Parameters$Values[1], " disruption is finished and has been attached.<br><br>",
           "Please reach out if you have any questions and have a wonderful day!<br><br>",
           "<em>This is an automated message</em>")
  } else {
    paste0("The ", Parameters$Values[1], " disruption is finished and may be found here:<br><br>",
           "<a href='\\\\\\oh2shared\\oh2actuarial\\National\\Disruption Insourcing\\_Production Finished Batch\\",
           FolderName, "\\'>Link to the finished disruption</a><br><br>",
           "This disruption has ", num_flags, " flagged records.<br>",
           "If you do not have access to this folder location, please reach out to NetworkAnalysisUnit@anthem.com.<br><br>",
           "Please reach out if you have any questions and have a wonderful day!")
  }

  subject_line  <- paste0("Disruption Finished - ", Parameters$Values[1])
  Analyst_Email <- Parameters$Values[3]  # default to original requestor

  # --- Custom reroute logic for auto files ---
  if (substring(FileName, 1, 4) == "auto") {

    # Define threshold table
    Custom_Thresholds <- data.frame(
      NTWK_CD   = c("18M0"),   # Extend as needed
      Threshold = c(0.70),
      stringsAsFactors = FALSE
    )
    default_threshold <- 0.95
    HMO_threshold     <- 0.90
    HPN_threshold     <- 0.80

    # Prepare flagged summary container
    flagged_summaries <- list()

    for (nm in names(network_match_list)) {
      pct <- network_match_list[[nm]]
      if (is.na(pct)) next

      # Determine threshold
      threshold <- default_threshold

      if (nm == "HMO") threshold <- HMO_threshold
      if (nm == "HPN") threshold <- HPN_threshold

      # Apply Select-specific thresholds
      if (exists("Select_Parameters") &&
          nm %in% Select_Parameters$Network_Code) {
        ntwk_cd <- Select_Parameters %>%
          filter(Network_Code == nm) %>%
          pull(NTWK_CD) %>%
          unique()
        threshold_custom <- Custom_Thresholds %>%
          filter(NTWK_CD %in% ntwk_cd) %>%
          arrange(Threshold) %>%
          pull(Threshold) %>%
          first()
        if (!is.na(threshold_custom)) threshold <- threshold_custom
      }

      # Flag if below threshold
      if (pct < threshold) {
        flagged_summaries[[nm]] <- pct
      }
    }

    # If flagged, override subject/email
    if (length(flagged_summaries) > 0) {
      Analyst_Email <- "NetworkAnalysisUnit@healthcare.com"
      subject_line  <- paste0("FLAGGED: Low Match Rate - ", Parameters$Values[1])

      # Split out Select vs Other
      select_codes <- if (exists("Select_Parameters")) {
        intersect(names(flagged_summaries),
                  Select_Parameters$Network_Code)
      } else character(0)
      other_codes  <- setdiff(names(flagged_summaries), select_codes)

      # Build HTML lists
      summary_lines <- ""
      if (length(other_codes) > 0) {
        summary_lines <- paste0(
          "<strong>Other Networks:</strong><br><ul>",
          paste0(
            "<li>", other_codes, ": ",
            sprintf("%.2f%%", unlist(flagged_summaries[other_codes]) * 100),
            "</li>", collapse = ""
          ),
          "</ul><br>"
        )
      }

      select_lines <- ""
      if (length(select_codes) > 0) {
        select_lines <- paste0(
          "<strong>Select Networks Breakdown:</strong><br><ul>",
          paste0(
            "<li>", select_codes, ": ",
            sprintf("%.2f%%", unlist(flagged_summaries[select_codes]) * 100),
            "</li>", collapse = ""
          ),
          "</ul><br>"
        )
      }

      # Final email body
      bl_body <- paste0(
        "This disruption was flagged due to low match rates in the following network(s):<br><br>",
        summary_lines,
        select_lines,
        "Original requestor:<br><strong>Email:</strong> ", Parameters$Values[3]
      )
    }
  }

  # --- Send the email ---
  bl_em <- compose_email(body = md(bl_body))

  if (zip_file_size <= max_size_bytes) {
    bl_em <- bl_em %>%
      add_attachment(file = zip_file)
  }

  bl_em %>% smtp_send(
    from        = creds_key(id = "my_creds")$user,
    to          = Analyst_Email,
    subject     = subject_line,
    credentials = creds_key(id = "my_creds")
  )

  fs::file_delete(zip_file)
}
